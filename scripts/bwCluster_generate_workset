#!/bin/sh

# Use this script to generate a workset from a graphedit command line
# The workset consists of a set of individual jobs that can be run independetly of each other

# Usage: ./bwCluster_generate_workset <workset_name>

OLD_DIR="$(pwd)"
WORK_DIR="${1}"


if [ $# -ne 1 ] ; then
	echo "Usage: ${0} <workset_name>"
	exit 1
elif [ -d "${WORK_DIR}" ] ; then
	echo "Workset '${WORK_DIR}' already exits"
	exit 1
fi

mkdir "${WORK_DIR}"
cd "${WORK_DIR}"

aborted ()
{
	trap - EXIT INT
	echo
	cd "${OLD_DIR}"
	rm -r "${WORK_DIR}"
	exit 1
}

trap aborted EXIT INT


# get binary
args_check=1
while [ $args_check -ne 0 ] ; do
	read -p "Specify the location of the graphedit binary: " CMD
	args_check=0
	IS_ABSOLUTE="${CMD##/*}" # if the path starts with / result is the empty string, otherwise unchanged
	if [ ${#IS_ABSOLUTE} -eq 0 -a -x "${CMD}" -a ! -d "${CMD}" ] ; then
		args_check=0
		ln -s "${CMD}" graphedit
	elif [ ${#IS_ABSOLUTE} -ne 0 -a -x "${OLD_DIR}/${CMD}" -a ! -d "${OLD_DIR}/${CMD}" ] ; then
		args_check=0
		ln -s "${OLD_DIR}/${CMD}" graphedit
	else
		echo "Can't find '${CMD}'"
		args_check=1
	fi
done

# get arguments
args_check=1
while [ $args_check -ne 0 ] ; do
	read -p "Specify the options to graphedit to run on each node. Omit -j and input graphs. " CMDARGS
	test_output=$(./graphedit ${CMDARGS} 2>&1)
	args_check=$?
	# k: 0-0, t/T: 0s/0s, n/N: 0x/0s, j: 1. 1 combinations on 0 files
	echo "${test_output}"
	if [ ${args_check} -eq 0 ] ; then
		args_check=1
		read -p "Does that look right? (yes/no) " CHECK
		case ${CHECK} in
			Y*|y*)
				args_check=0
				COMBINATIONS=$(echo "${test_output}" | grep "combinations on" | sed -r 's/^.*\. ([0-9]+) combinations on.*$/\1/')
				;;
		esac
	else
		echo "Arguments seem to be invalid"
	fi
done
echo -e "#!/bin/sh\n\ncd \"$(pwd)\"\nexec ./graphedit ${CMDARGS} \"\$@\"" > cmdline
chmod +x cmdline

# get graphs
args_check=1
while [ $args_check -ne 0 ] ; do
	args_check=0
	graph_count=0
	read -p "Specify graph files: " FILES
	# test if graphs are accessable
	for f in ${FILES} ; do
		IS_ABSOLUTE="${f##/*}" # if the path starts with / result is the empty string, otherwise unchanged
		if [ ${#IS_ABSOLUTE} -eq 0 -a -r "${f}" -a ! -d "${f}" ] ; then
			args_check=0
			graph_count=$((graph_count + 1))
		elif [ ${#IS_ABSOLUTE} -ne 0 -a -r "${OLD_DIR}/${f}" -a ! -d "${OLD_DIR}/${f}" ] ; then
			args_check=0
			graph_count=$((graph_count + 1))
		else
			echo "Cant read '${f}'"
			args_check=1
		fi
	done
done

args_check2=1
while [ $args_check2 -ne 0 ] ; do
	# get repetitions
	args_check=1
	while [ $args_check -ne 0 ] ; do
		read -p "How many repetitions per experiment? " REPEAT
		i=$(seq "${REPEAT}" | tail -n 1)
		args_check=$([ "${i}" -eq "${REPEAT}" ] ; echo "$?")
	done

	# get threads per task
	args_check=1
	while [ $args_check -ne 0 ] ; do
		read -p "How many threads per task? " THREADS_PER_TASK
		i=$(seq "${THREADS_PER_TASK}" | tail -n 1)
		args_check=$([ "${i}" -eq "${THREADS_PER_TASK}" ] ; echo "$?")
	done

	# get tasks per node
	args_check=1
	while [ $args_check -ne 0 ] ; do
		read -p "How many tasks per node? " TASKS_PER_NODE
		i=$(seq "${TASKS_PER_NODE}" | tail -n 1)
		args_check=$([ "${i}" -eq "${TASKS_PER_NODE}" ] ; echo "$?")
	done

	# get cores per node
	args_check=1
	while [ $args_check -ne 0 ] ; do
		read -p "How many cores per node? " CORES_PER_NODE
		i=$(seq "${CORES_PER_NODE}" | tail -n 1)
		args_check=$([ "${i}" -eq "${CORES_PER_NODE}" ] ; echo "$?")
	done

	# check for consistency
	WARN=""
	if [ "${TASKS_PER_NODE}" -gt "${REPEAT}" ] || [ "$(( REPEAT - REPEAT / TASKS_PER_NODE * TASKS_PER_NODE ))" -ne 0 ] ; then
		WARN="${WARN} Nodes will run mixed experiments."
	fi
	if [ "$(( CORES_PER_NODE - (CORES_PER_NODE / (THREADS_PER_TASK * TASKS_PER_NODE)) * THREADS_PER_TASK * TASKS_PER_NODE ))" -ne 0 ] ; then
		WARN="${WARN} Uneven allocation."
	fi
	if [ "$((THREADS_PER_TASK * TASKS_PER_NODE))" -gt "${CORES_PER_NODE}" ] ; then
		WARN="${WARN} Allocating more threads than available."
	fi

	args_check2=1
	if [ -z "${WARN}" ] ; then
		args_check2=0
	else
		echo "Warnings: ${WARN}"
		read -p "Continue anyways? (yes/no) " CHECK
		case ${CHECK} in
			Y*|y*)
				args_check2=0
				;;
		esac
	fi
done

# get nodes per job
args_check=1
while [ $args_check -ne 0 ] ; do
	read -p "How many nodes per job? " NODES_PER_JOB
	i=$(seq "${NODES_PER_JOB}" | tail -n 1)
	args_check=$([ "${i}" -eq "${NODES_PER_JOB}" ] ; echo "$?")
done

# we run graph_count * COMBINATIONS * REPEAT experiments
# TASKS_PER_NODE fit on each node
# -> we need (graph_count * COMBINATIONS * REPEAT) / TASKS_PER_NODE nodes
# -> we need (graph_count * COMBINATIONS * REPEAT) / TASKS_PER_NODE / NODES_PER_JOB jobs
# in both cases: round up
JOB_COUNT=$(( ((graph_count * COMBINATIONS * REPEAT + TASKS_PER_NODE - 1) / TASKS_PER_NODE + NODES_PER_JOB - 1) / NODES_PER_JOB ))
echo "Will create ${JOB_COUNT} jobs."

mkdir graphs results jobs tasks

# create graph symlinks and work indicators
cd graphs
for f in ${FILES} ; do
	graphbase="${f##*/}"
	IS_ABSOLUTE="${f##/*}" # if the path starts with / result is the empty string, otherwise unchanged
	if [ ${#IS_ABSOLUTE} -eq 0 ] ; then
		ln -s "${f}" "${graphbase}"
	elif [ ${#IS_ABSOLUTE} -ne 0 ] ; then
		ln -s "${OLD_DIR}/${f}" "${graphbase}"
	fi
done
cd ..

cd jobs
g=1
gg="$(echo "${FILES}" | awk -v N=${g} '{print $N}')"
c=1
r=1
for j in $(seq ${JOB_COUNT}) ; do
# graph, combination, repeat
	#MPI_PROGS=""
	for t in $(seq $(( TASKS_PER_NODE * NODES_PER_JOB )) ) ; do
		echo -e "#!/bin/sh\n\nexec sh -c '../cmdline -j ${THREADS_PER_TASK} -X ${c} graphs/${gg##*/}' > ../results/task.${j}.${t}.eval" >> ../tasks/task.${j}.${t}.sh
		chmod +x ../tasks/task.${j}.${t}.sh
		MPI_PROGS="${MPI_PROGS} ${MPI_PROGS:+:} ../tasks/task.${j}.${t}.sh"
		r=$((r + 1))
		if [ "${r}" -gt "${REPEAT}" ] ; then r=1 ; c=$((c + 1)) ; fi
		if [ "${c}" -gt "${COMBINATIONS}" ] ; then c=1 ; g=$((g + 1)) ; gg="$(echo "${FILES}" | awk -v N=${g} '{print $N}')" ; fi
		if [ "${g}" -gt "${graph_count}" ] ; then break ; fi
	done

#######################################
# job script
# all variables that should be evaluated when submitting the job need to be escaped, e.g. "\${variable}"
# unescaped varibles will be evaluated when creating the job script
#######################################
	# done assembling program arguments for one job, create job script
	cat - > job.${j}.sh <<EOF
#!/bin/bash
#MSUB -l nodes=${NODES_PER_JOB}:ppn=${CORES_PER_NODE}
#MSUB -l walltime=1:00:00
#MSUB -l mem=600mb
#MSUB -N Single_Threaded_28_Shared
#MSUB -v MODULE="devel/python/3.5.2 compiler/gnu/7.1 mpi/openmpi/3.0-gnu-7.1"
#MSUB -v EXECUTABLE="$(pwd)/job.${j}.sh"

#Usually you should set
export KMP_AFFINITY=compact,1,0
#export KMP_AFFINITY=verbose,compact,1,0 prints messages concerning the supported affinity
#KMP_AFFINITY Description: https://software.intel.com/en-us/node/524790#KMP_AFFINITY_ENVIRONMENT_VARIABLE

module load \${MODULE}
echo "Executable \${EXECUTABLE} running on \${MOAB_PROCCOUNT} cores with \${OMP_NUM_THREADS} threads"
mpi_options="--bind-to core --map-by core:PE=$((${CORES_PER_NODE}/${TASKS_PER_NODE})) -report-bindings"

mpi_progs="${MPI_PROGS}"

exec mpirun -n \${MOAB_PROCCOUNT} \${mpi_options} \${mpi_progs}
EOF

#######################################

	unset MPI_PROGS
done
cd ..

# cleanup
trap - EXIT INT
cd "${OLD_DIR}"
echo
echo "Workset '${WORK_DIR}' generated"
echo "Scripts for msub can be found in '${WORK_DIR}/jobs'"
